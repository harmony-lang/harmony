module Tokenizer

import Console.IO as Console
import Data.Char as Char
import Data.Maybe as Maybe exposing (Just, Nothing)
import Data.String as String

enum Token
    = TkNumber(int)
    | TkPlus
    | TkMinus
    | TkTimes
    | TkDiv
    | TkLParen
    | TkRParen
    | TkError(string)

fun tokenize_input(input: string, index: int, tokens: [Token]) -> Maybe<[Token]> =
    case String.length(input) of
        | 0 => Just(tokens)
        | else => case String.get(input, index) of
            | Just(c) => case Char.isDigit(c) of
                | true => tokenize_input(input, index + 1, tokens ++ [TkNumber(Char.toInt(c))])
                | false => case c of
                    | '+' => tokenize_input(input, index + 1, tokens ++ [TkPlus])
                    | '-' => tokenize_input(input, index + 1, tokens ++ [TkMinus])
                    | '*' => tokenize_input(input, index + 1, tokens ++ [TkTimes])
                    | '/' => tokenize_input(input, index + 1, tokens ++ [TkDiv])
                    | '(' => tokenize_input(input, index + 1, tokens ++ [TkLParen])
                    | ')' => tokenize_input(input, index + 1, tokens ++ [TkRParen])
                    | else => tokenize_input(input, index + 1, tokens ++ [TkError("Unexpected character")])
                end
            end
            | Nothing => Just(tokens)
        end
    end

fun tokenize(input: string) -> Maybe<[Token]> =
    tokenize_input(input, 0, [])

fun main =
    case tokenize("1+2*3") of
        | Just(tokens) => Console.println(tokens)
        | Nothing => Console.println("Error")
    end