module Selfhost

-- This program is just a test to see how far I could get
-- if I decide to selfhost this language in the future.

import IO.Console as Console
import Data.Maybe as Maybe exposing (Just, Nothing)
import Data.String as String
import Data.Char as Char

enum Token
    -- Literals
    = TkIdentifier (string)
    -- Keywords
    | TkModule
    | TkImport
    | TkAs
    | TkExposing
    | TkForeign
    | TkEnum
    | TkFun
    | TkCase
    | TkOf
    | TkEnd
    | TkIf
    | TkThen
    | TkElse
    | TkLet
    | TkIn
    -- Punctuation
    | TkOpenParen
    | TkCloseParen
    | TkArrow
    -- Operators
    | TkMinus
    -- Special
    | TkUnknown (string)
    | TkEOF

fun tokenize_identifier(s: string, i: int, identifier: string) -> Token =
    case String.get (s, i) of
        | Just (c) if Char.isAlphabetic $ c => tokenize_identifier (s, i + 1, identifier ++ c)
        | else => TkIdentifier (identifier)
    end

fun tokenize_(s: string, i: int, tokens: [Token]) -> Maybe<[Token]> =
    case String.length $ s of
        | 0 => Just (tokens ++ [TkEOF])
        | else => case String.get (s, i) of
            | Just (c) if c == ' ' => tokenize_ (s, i + 1, tokens)
            | Just (c) if Char.isAlphabetic $ c =>
                let token = tokenize_identifier (s, i, "") in
                case token of
                    | TkIdentifier (str) => let len = String.length $ str in 
                    case str of
                        | "module" => tokenize_ (s, i + len, tokens ++ [TkModule])
                        | else => tokenize_ (s, i + len, tokens ++ [token])
                    end
                    | else => tokenize_ (s, i + 1, tokens ++ [token])
                end
            | Just (c) => case c of
                | '(' => tokenize_ (s, i + 1, tokens ++ [TkOpenParen])
                | ')' => tokenize_ (s, i + 1, tokens ++ [TkCloseParen])
                | '-' => case String.get (s, i + 1) of
                    | Just (c) if c == '>' => tokenize_ (s, i + 2, tokens ++ [TkArrow])
                    | else => tokenize_ (s, i + 1, tokens ++ [TkMinus])
                end
                | else => tokenize_ (s, i + 1, tokens ++ [TkUnknown (c)])
            end
            | else => Just (tokens ++ [TkEOF])
        end
    end

fun tokenize(s: string) -> Maybe<[Token]> =
    tokenize_(s, 0, [])

fun main =
    let tokens = tokenize $ "module abc ( ) -> -" in
    Console.println $ tokens